# there are three primitive types:
#   string
#   number
#   bool (implemented with number, where nonzero == true)

# == function example ==
# func fib(n: number): number
#     if n == 0 || n == 1
#         return n
#     else
#         return fib(n-1) + fib(n-2)
#     end
# end

# == examples of built-in functions: (none of which are currently implemented) ==
# say("Hello, world!")
# say_wait("Hello, world!", 2)
# create_clone()
# create_clone_of("myself")

# == control flow (barely implemented) ==
# if condition
#   do_stuff()
# elif condition2
#   do_more_stuff()
# end
#
# if condition: single_line_if()
#
# (no repeat until, because repeat until = while not)
# (and I'm lazy)
# while condition
#  do_stuff()
# end
#
# for i in 1..5 # 1 and 4 are both included
#   say_wait(tostring(i), 2)
# end 
#
# var i: number = 1
# repeat 5
#   say_wait("iteration " & tostring(i), 2)
#   i += 1
# end

costume "alien-in-suit.png"

# func add(a: number, b: number): number
#     return a + b
# end

func some_number(): number
    return number(ask("enter a number"))
end

@nowarp
on flag
    if true
        sprite_say_wait("yes", 2)
    elseif false
        sprite_say_wait("no", 2)
    else
        sprite_say_wait("idk", 2)
    end

    # var num: number = 100
    # var num2: number = -100
    #sprite_say_wait("Hello, " & ask("number:" & (some_number() + num + num2)) & "!", 2)
end